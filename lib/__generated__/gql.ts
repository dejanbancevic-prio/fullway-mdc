/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "mutation SubscribeEmailToNewsletter($email: String!) {\n  subscribeEmailToNewsletter(email: $email) {\n    status\n  }\n}": typeof types.SubscribeEmailToNewsletterDocument,
    "query BlogPage($keyWord: String!, $currentPage: Int!, $pageSize: Int!) {\n  awBlogPosts(\n    filter: {title: {like: $keyWord}}\n    currentPage: $currentPage\n    pageSize: $pageSize\n  ) {\n    total_count\n    items {\n      url_key\n      title\n      publish_date\n      authors {\n        firstname\n        lastname\n      }\n      content\n      tags {\n        items {\n          id\n          name\n          url_key\n        }\n      }\n    }\n  }\n}": typeof types.BlogPageDocument,
    "query BlogPageByTag($keyWord: String!, $currentPage: Int!, $pageSize: Int!, $tag_names: [String]!) {\n  awBlogPosts(\n    filter: {title: {like: $keyWord}, tag_name: {in: $tag_names}}\n    currentPage: $currentPage\n    pageSize: $pageSize\n  ) {\n    total_count\n    items {\n      url_key\n      title\n      publish_date\n      authors {\n        firstname\n        lastname\n      }\n      tags {\n        items {\n          id\n          name\n          url_key\n        }\n      }\n    }\n  }\n}": typeof types.BlogPageByTagDocument,
    "query ProductPage($urlKey: String!) {\n  products(filter: {url_key: {eq: $urlKey}}) {\n    items {\n      id\n      uid\n      url_key\n      name\n      ... on ConfigurableProduct {\n        variants {\n          attributes {\n            label\n          }\n          product {\n            image {\n              disabled\n              url\n            }\n            description_overview {\n              paragraphs {\n                title\n                content\n              }\n            }\n            productRating {\n              ratingValue\n              ratingCount\n            }\n            sku\n            max_air_pressure\n            size_text\n            url_key\n            uid\n            stock_status\n            name\n            season_text\n            price_range {\n              minimum_price {\n                final_price {\n                  value\n                  currency\n                }\n              }\n            }\n            size_text\n            load_index_text\n            speed_rating\n            utqg\n            rim_diameter_text\n            overall_diameter\n            tread_depth_text\n            sidewall_specifics_text\n          }\n        }\n      }\n    }\n  }\n}": typeof types.ProductPageDocument,
    "query GetVehicleYears {\n  vehicleYears {\n    decade\n    years\n  }\n}\n\nquery GetVehicleMakes($year: String!) {\n  vehicleMakes(year: $year) {\n    letter\n    makes {\n      name\n      slug\n      logo\n    }\n  }\n}\n\nquery GetVehicleModels($year: String!, $make: String!) {\n  vehicleModels(year: $year, make: $make) {\n    name\n    slug\n  }\n}\n\nquery GetVehicleOptions($year: String!, $make: String!, $model: String!) {\n  vehicleOptions(year: $year, make: $make, model: $model) {\n    name\n    slug\n    chassis_id\n  }\n}": typeof types.GetVehicleYearsDocument,
};
const documents: Documents = {
    "mutation SubscribeEmailToNewsletter($email: String!) {\n  subscribeEmailToNewsletter(email: $email) {\n    status\n  }\n}": types.SubscribeEmailToNewsletterDocument,
    "query BlogPage($keyWord: String!, $currentPage: Int!, $pageSize: Int!) {\n  awBlogPosts(\n    filter: {title: {like: $keyWord}}\n    currentPage: $currentPage\n    pageSize: $pageSize\n  ) {\n    total_count\n    items {\n      url_key\n      title\n      publish_date\n      authors {\n        firstname\n        lastname\n      }\n      content\n      tags {\n        items {\n          id\n          name\n          url_key\n        }\n      }\n    }\n  }\n}": types.BlogPageDocument,
    "query BlogPageByTag($keyWord: String!, $currentPage: Int!, $pageSize: Int!, $tag_names: [String]!) {\n  awBlogPosts(\n    filter: {title: {like: $keyWord}, tag_name: {in: $tag_names}}\n    currentPage: $currentPage\n    pageSize: $pageSize\n  ) {\n    total_count\n    items {\n      url_key\n      title\n      publish_date\n      authors {\n        firstname\n        lastname\n      }\n      tags {\n        items {\n          id\n          name\n          url_key\n        }\n      }\n    }\n  }\n}": types.BlogPageByTagDocument,
    "query ProductPage($urlKey: String!) {\n  products(filter: {url_key: {eq: $urlKey}}) {\n    items {\n      id\n      uid\n      url_key\n      name\n      ... on ConfigurableProduct {\n        variants {\n          attributes {\n            label\n          }\n          product {\n            image {\n              disabled\n              url\n            }\n            description_overview {\n              paragraphs {\n                title\n                content\n              }\n            }\n            productRating {\n              ratingValue\n              ratingCount\n            }\n            sku\n            max_air_pressure\n            size_text\n            url_key\n            uid\n            stock_status\n            name\n            season_text\n            price_range {\n              minimum_price {\n                final_price {\n                  value\n                  currency\n                }\n              }\n            }\n            size_text\n            load_index_text\n            speed_rating\n            utqg\n            rim_diameter_text\n            overall_diameter\n            tread_depth_text\n            sidewall_specifics_text\n          }\n        }\n      }\n    }\n  }\n}": types.ProductPageDocument,
    "query GetVehicleYears {\n  vehicleYears {\n    decade\n    years\n  }\n}\n\nquery GetVehicleMakes($year: String!) {\n  vehicleMakes(year: $year) {\n    letter\n    makes {\n      name\n      slug\n      logo\n    }\n  }\n}\n\nquery GetVehicleModels($year: String!, $make: String!) {\n  vehicleModels(year: $year, make: $make) {\n    name\n    slug\n  }\n}\n\nquery GetVehicleOptions($year: String!, $make: String!, $model: String!) {\n  vehicleOptions(year: $year, make: $make, model: $model) {\n    name\n    slug\n    chassis_id\n  }\n}": types.GetVehicleYearsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation SubscribeEmailToNewsletter($email: String!) {\n  subscribeEmailToNewsletter(email: $email) {\n    status\n  }\n}"): (typeof documents)["mutation SubscribeEmailToNewsletter($email: String!) {\n  subscribeEmailToNewsletter(email: $email) {\n    status\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query BlogPage($keyWord: String!, $currentPage: Int!, $pageSize: Int!) {\n  awBlogPosts(\n    filter: {title: {like: $keyWord}}\n    currentPage: $currentPage\n    pageSize: $pageSize\n  ) {\n    total_count\n    items {\n      url_key\n      title\n      publish_date\n      authors {\n        firstname\n        lastname\n      }\n      content\n      tags {\n        items {\n          id\n          name\n          url_key\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query BlogPage($keyWord: String!, $currentPage: Int!, $pageSize: Int!) {\n  awBlogPosts(\n    filter: {title: {like: $keyWord}}\n    currentPage: $currentPage\n    pageSize: $pageSize\n  ) {\n    total_count\n    items {\n      url_key\n      title\n      publish_date\n      authors {\n        firstname\n        lastname\n      }\n      content\n      tags {\n        items {\n          id\n          name\n          url_key\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query BlogPageByTag($keyWord: String!, $currentPage: Int!, $pageSize: Int!, $tag_names: [String]!) {\n  awBlogPosts(\n    filter: {title: {like: $keyWord}, tag_name: {in: $tag_names}}\n    currentPage: $currentPage\n    pageSize: $pageSize\n  ) {\n    total_count\n    items {\n      url_key\n      title\n      publish_date\n      authors {\n        firstname\n        lastname\n      }\n      tags {\n        items {\n          id\n          name\n          url_key\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query BlogPageByTag($keyWord: String!, $currentPage: Int!, $pageSize: Int!, $tag_names: [String]!) {\n  awBlogPosts(\n    filter: {title: {like: $keyWord}, tag_name: {in: $tag_names}}\n    currentPage: $currentPage\n    pageSize: $pageSize\n  ) {\n    total_count\n    items {\n      url_key\n      title\n      publish_date\n      authors {\n        firstname\n        lastname\n      }\n      tags {\n        items {\n          id\n          name\n          url_key\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ProductPage($urlKey: String!) {\n  products(filter: {url_key: {eq: $urlKey}}) {\n    items {\n      id\n      uid\n      url_key\n      name\n      ... on ConfigurableProduct {\n        variants {\n          attributes {\n            label\n          }\n          product {\n            image {\n              disabled\n              url\n            }\n            description_overview {\n              paragraphs {\n                title\n                content\n              }\n            }\n            productRating {\n              ratingValue\n              ratingCount\n            }\n            sku\n            max_air_pressure\n            size_text\n            url_key\n            uid\n            stock_status\n            name\n            season_text\n            price_range {\n              minimum_price {\n                final_price {\n                  value\n                  currency\n                }\n              }\n            }\n            size_text\n            load_index_text\n            speed_rating\n            utqg\n            rim_diameter_text\n            overall_diameter\n            tread_depth_text\n            sidewall_specifics_text\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query ProductPage($urlKey: String!) {\n  products(filter: {url_key: {eq: $urlKey}}) {\n    items {\n      id\n      uid\n      url_key\n      name\n      ... on ConfigurableProduct {\n        variants {\n          attributes {\n            label\n          }\n          product {\n            image {\n              disabled\n              url\n            }\n            description_overview {\n              paragraphs {\n                title\n                content\n              }\n            }\n            productRating {\n              ratingValue\n              ratingCount\n            }\n            sku\n            max_air_pressure\n            size_text\n            url_key\n            uid\n            stock_status\n            name\n            season_text\n            price_range {\n              minimum_price {\n                final_price {\n                  value\n                  currency\n                }\n              }\n            }\n            size_text\n            load_index_text\n            speed_rating\n            utqg\n            rim_diameter_text\n            overall_diameter\n            tread_depth_text\n            sidewall_specifics_text\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetVehicleYears {\n  vehicleYears {\n    decade\n    years\n  }\n}\n\nquery GetVehicleMakes($year: String!) {\n  vehicleMakes(year: $year) {\n    letter\n    makes {\n      name\n      slug\n      logo\n    }\n  }\n}\n\nquery GetVehicleModels($year: String!, $make: String!) {\n  vehicleModels(year: $year, make: $make) {\n    name\n    slug\n  }\n}\n\nquery GetVehicleOptions($year: String!, $make: String!, $model: String!) {\n  vehicleOptions(year: $year, make: $make, model: $model) {\n    name\n    slug\n    chassis_id\n  }\n}"): (typeof documents)["query GetVehicleYears {\n  vehicleYears {\n    decade\n    years\n  }\n}\n\nquery GetVehicleMakes($year: String!) {\n  vehicleMakes(year: $year) {\n    letter\n    makes {\n      name\n      slug\n      logo\n    }\n  }\n}\n\nquery GetVehicleModels($year: String!, $make: String!) {\n  vehicleModels(year: $year, make: $make) {\n    name\n    slug\n  }\n}\n\nquery GetVehicleOptions($year: String!, $make: String!, $model: String!) {\n  vehicleOptions(year: $year, make: $make, model: $model) {\n    name\n    slug\n    chassis_id\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;